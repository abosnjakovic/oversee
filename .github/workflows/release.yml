---
name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.5)'
        required: true
        type: string
      create_new_release:
        description: 'Create new GitHub release'
        required: true
        type: boolean
        default: true
      release_tag:
        description: 'Tag name for release (defaults to v{version})'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual trigger - use provided version
            version="${{ github.event.inputs.version }}"
            tag="${{ github.event.inputs.release_tag || format('v{0}', github.event.inputs.version) }}"
          else
            # Tag push trigger - extract from ref
            version="${GITHUB_REF#refs/tags/v}"
            tag="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "Version: ${version}, Tag: ${tag}"

      - name: Create Release
        id: create_release
        if: github.event_name == 'push' || github.event.inputs.create_new_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ steps.get_version.outputs.version }}"
          tag="${{ steps.get_version.outputs.tag }}"

          # Check if release already exists
          if gh release view "${tag}" --repo ${{ github.repository }} &>/dev/null; then
            echo "Release ${tag} already exists, skipping creation"
            # Get existing release upload URL
            upload_url=$(gh api repos/${{ github.repository }}/releases/tags/${tag} --jq '.upload_url')
            echo "upload_url=${upload_url}" >> $GITHUB_OUTPUT
            exit 0
          fi

          gh release create "${tag}" \
            --repo ${{ github.repository }} \
            --title "Release ${tag}" \
            --notes "Release ${version}

          ## Changes
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          for details.

          ## Installation

          ### macOS (Apple Silicon)
          \`\`\`bash
          version=\"${version}\"
          repo=\"${{ github.repository }}\"
          ref=\"${tag}\"
          curl -L \"https://github.com/\${repo}/releases/download/\${ref}/oversee-\${version}-aarch64-apple-darwin.tar.gz\" | tar xz
          \`\`\`

          ### macOS (Intel)
          \`\`\`bash
          version=\"${version}\"
          repo=\"${{ github.repository }}\"
          ref=\"${tag}\"
          curl -L \"https://github.com/\${repo}/releases/download/\${ref}/oversee-\${version}-x86_64-apple-darwin.tar.gz\" | tar xz
          \`\`\`" \
            --draft=false \
            --prerelease=false

          # Get upload URL for use by build jobs
          upload_url=$(gh api repos/${{ github.repository }}/releases/tags/${tag} --jq '.upload_url')
          echo "upload_url=${upload_url}" >> $GITHUB_OUTPUT

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: aarch64-apple-darwin
          - os: macos-13
            target: x86_64-apple-darwin
            suffix: x86_64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive
        run: |
          cd target/${{ matrix.target }}/release
          version="${{ needs.create-release.outputs.version }}"
          suffix="${{ matrix.suffix }}"
          archive_name="oversee-${version}-${suffix}.tar.gz"
          tar czf "$archive_name" oversee
          ls -la "$archive_name"

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ needs.create-release.outputs.version }}"
          suffix="${{ matrix.suffix }}"
          target="${{ matrix.target }}"
          archive_name="oversee-${version}-${suffix}.tar.gz"
          tag="${{ needs.create-release.outputs.tag }}"
          gh release upload "${tag}" \
            --repo ${{ github.repository }} \
            "target/${target}/release/${archive_name}"

  update-homebrew-formula:
    name: Update Homebrew Formula
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Calculate SHA256 hashes
        id: sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ needs.create-release.outputs.version }}"
          repo="${{ github.repository }}"
          tag="${{ needs.create-release.outputs.tag }}"

          # Download and calculate SHA256 for Apple Silicon
          aarch64_url="https://github.com/${repo}/releases/download/${tag}/oversee-${version}-aarch64-apple-darwin.tar.gz"
          aarch64_sha256=$(curl -sL "${aarch64_url}" | sha256sum | cut -d' ' -f1)
          echo "aarch64_sha256=${aarch64_sha256}" >> $GITHUB_OUTPUT

          # Download and calculate SHA256 for Intel
          x86_url="https://github.com/${repo}/releases/download/${tag}/oversee-${version}-x86_64-apple-darwin.tar.gz"
          x86_sha256=$(curl -sL "${x86_url}" | sha256sum | cut -d' ' -f1)
          echo "x86_sha256=${x86_sha256}" >> $GITHUB_OUTPUT

          echo "Apple Silicon SHA256: ${aarch64_sha256}"
          echo "Intel SHA256: ${x86_sha256}"

      - name: Generate Homebrew Formula
        id: formula
        run: |
          version="${{ needs.create-release.outputs.version }}"
          repo="${{ github.repository }}"
          tag="${{ needs.create-release.outputs.tag }}"
          aarch64_sha256="${{ steps.sha256.outputs.aarch64_sha256 }}"
          x86_sha256="${{ steps.sha256.outputs.x86_sha256 }}"

          cat > oversee.rb << 'EOF'
          class Oversee < Formula
            desc "A modern system monitor for macOS with Apple Silicon GPU support"
            homepage "https://github.com/REPO_PLACEHOLDER"
            version "VERSION_PLACEHOLDER"

            if Hardware::CPU.arm?
              url "https://github.com/REPO_PLACEHOLDER/releases/download/TAG_PLACEHOLDER/oversee-VERSION_PLACEHOLDER-aarch64-apple-darwin.tar.gz"
              sha256 "AARCH64_SHA256_PLACEHOLDER"
            else
              url "https://github.com/REPO_PLACEHOLDER/releases/download/TAG_PLACEHOLDER/oversee-VERSION_PLACEHOLDER-x86_64-apple-darwin.tar.gz"
              sha256 "X86_SHA256_PLACEHOLDER"
            end

            def install
              bin.install "oversee"
            end

            test do
              system "#{bin}/oversee", "--version"
            end
          end
          EOF

          # Replace placeholders using | delimiter to avoid issues with forward slashes
          sed -i "s|REPO_PLACEHOLDER|${repo}|g" oversee.rb
          sed -i "s|VERSION_PLACEHOLDER|${version}|g" oversee.rb
          sed -i "s|TAG_PLACEHOLDER|${tag}|g" oversee.rb
          sed -i "s|AARCH64_SHA256_PLACEHOLDER|${aarch64_sha256}|g" oversee.rb
          sed -i "s|X86_SHA256_PLACEHOLDER|${x86_sha256}|g" oversee.rb

          echo "Generated formula:"
          cat oversee.rb

      - name: Update Homebrew Formula in Main Repo
        env:
          HOMEBREW_TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Clone the main repository
          main_repo_url="https://x-access-token:${HOMEBREW_TAP_TOKEN}@github.com/${{ github.repository }}.git"
          git clone "${main_repo_url}" main-repo

          # Copy formula and commit
          cd main-repo
          mkdir -p Formula
          cp ../oversee.rb Formula/oversee.rb

          git add Formula/oversee.rb
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update oversee formula to ${{ needs.create-release.outputs.version }}"
            git push origin main
            echo "Formula updated successfully!"
            echo "Users can install with:"
            echo "  brew tap ${{ github.repository }} https://github.com/${{ github.repository }}"
            echo "  brew install oversee"
          fi

  publish-crates:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Publish to crates.io
        run: cargo publish --allow-dirty --token ${{ secrets.CRATES_IO_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
